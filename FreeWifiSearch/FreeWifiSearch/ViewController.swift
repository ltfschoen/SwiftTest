//
//  ViewController.swift
//  FreeWifiSearch
//
//  Created by LS on 2/09/2015.
//  Copyright Â© 2015 LS. All rights reserved.
//

import UIKit
import MapKit

class ViewController: UIViewController {

    /* Constant (in Units of Meters) defining:
       - Extent of searching for Free Wifi from User Location
       - Distance for User to move before app Auto Refresh
    */
    let searchDistance: CLLocationDistance = 1000

    /* Property Declarations that hook variables in Interface Builder (IB). IBOutlets are set implicitly unwrapped as Optional Type prefixed with ! (so IBOutlets may be used without checking for nil but runtime crash will occur if value is nil) since IB supplies Views at Runtime the Swift Compiler does not know and would give error that variables values not set in all initializers, so do not use an IBOutlet before the View of the ViewController has loaded. IBOutlets are declared as weak by default since the View of a ViewController holds Strong References to its outlets
    */
    @IBOutlet weak var mapview: MKMapView!
    @IBOutlet weak var loginView: FBLoginView! // FBLoginView instead of UIView

    private var locationManager: CLLocationManager!

    /* Store Last Location of a User with CLLocation object that represents device geographical location data (including 2D coordinate, altitude, accuracy) generated by CLLocationManager object. Optional as may not yet have their Last Location
    */
    private var lastLocation: CLLocation?

    override func viewDidLoad() {
        super.viewDidLoad()

        self.locationManager = CLLocationManager()

        // Delegate Object for updated events
        self.locationManager.delegate = self

    }

    override func viewDidAppear(animated: Bool) {
        super.viewDidAppear(animated)

        self.checkLocationAuthorizationStatus()
    }

    private func checkLocationAuthorizationStatus() {
        if CLLocationManager.authorizationStatus() == .AuthorizedWhenInUse {
        } else {
            self.locationManager.requestWhenInUseAuthorization()
        }
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

}

/* Declare conformance to the CLLocationManagerDelegate Protocol that defines methods to receive location and heading updates from CLLocationManager Object
*/
extension ViewController: CLLocationManagerDelegate {

    // Communicates to Delegate that authorization status for app changed
    func locationManager(manager: CLLocationManager, didChangeAuthorizationStatus status: CLAuthorizationStatus) {
        self.checkLocationAuthorizationStatus()
    }

}

/* Declare conformance to the MKMapViewDelegate Protocol that defines methods that the Map View uses to communicate app related update messages about events to the View Controller (such as a User's Location)
*/
extension ViewController: MKMapViewDelegate {

    /* Tell Map View attempt to get User's Location fails to update (i.e. GPS failure) and show alert
    */
    func mapView(mapView: MKMapView, didFailToLocateUserWithError error: NSError) {

        print(error)

        let alert = UIAlertController(title: "Error", message: "Unable to obtain User's Location", preferredStyle: .Alert)

        // UIAlertAction is action taken when tap an alert action
        alert.addAction(UIAlertAction(title: "OK", style: .Default, handler: nil))

        // Modally present the ViewController
        self.presentViewController(alert, animated: true, completion: nil)
    }

}